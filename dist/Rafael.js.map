{"version":3,"sources":["../Rafael.js"],"names":[],"mappings":"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","file":"Rafael.js","sourcesContent":["/*\n# Rafael\n*/\nvar Rafael\n\n\n\n\n\n/*\n  ## `new Rafael`\n\n  `Rafael.tasks` maintains a record of all currently running tasks\n  associated with this instance of Rafael.\n\n  This will kick off the `Rafael`'s loop to constantly run tasks.\n*/\nRafael = function Rafael () {\n  this.paused = false\n  this.tasks = {}\n  this._startLoop = this._startLoop.bind(this)\n  this._startLoop()\n}\n\n\n\n\n\n/*\n  ## `Rafael.schedule(taskId, task, options)`\n\n  Schedule a task to be run in our loop. It takes up to three arguments:\n  `taskId`, `task`, and `options`.\n\n  * `taskId` (optional) represents the ID you'll use to interact with this task\n  later on. If an ID isn't set then it will be the index of the new task in\n  `this.tasks`.\n\n  * `task` (required) is the function to be run on this `Rafael`.\n\n  * `options` (optional) is a hash of options thingies?\n\n      * `context` (optional) is the value of `this` within the function. If not\n      set, the context will be `window`.\n\n      * `paused` (optional) determines whether this task will run immediately\n      after being added to the schedule\n\n      * `framerate` (optional) is the speed at which the task should be run in\n      frames per second (fps)\n*/\nRafael.prototype.schedule = function schedule (id, task, options) {\n  var framerate\n\n  if (typeof id !== 'string') {\n    options = task\n    task = id\n    id = Object.keys(this.tasks).length\n  }\n\n  options || (options = {})\n\n  this._debug = options.debug || false\n  this._frame = 0\n  framerate = Math.ceil(options.framerate || 60)\n\n  if (this._debug) {\n    console.log('Scheduling task', id)\n  }\n\n  if (framerate > 60) {\n    throw new RangeError('Framerate may not be higher than 60; Requested framerate is', framerate)\n    return\n  }\n\n  if (this.tasks[id]) {\n    throw new RangeError('A task with the ID \"' + id + '\" already exists')\n    return\n  }\n\n  this.tasks[id] = {\n    context: options.context || window,\n    paused: options.paused || false,\n    framerate: framerate,\n    task: task\n  }\n\n  return id\n}\n\n\n\n\n\n/*\n  ## `Rafael.unschedule(id)`\n\n  Remove a task from our loop. `id` is ID of the task to be removed from this `Rafael`.\n*/\nRafael.prototype.unschedule = function schedule (id) {\n  if (this._debug) {\n    console.log('Unscheduling task', id)\n  }\n\n  delete this.tasks[id]\n  return !this.tasks[id]\n}\n\n\n\n\n\n/*\n  ## `Rafael.clear()`\n\n  Remove all tasks from the `Rafael`. We just overwrite the original array\n  since this is a destructive operation.\n*/\nRafael.prototype.clear = function schedule () {\n  if (this._debug) {\n    console.log('Clearing tasks')\n  }\n\n  this.tasks = {}\n}\n\n\n\n\n\n/*\n  ## `Rafael.pause(id)`\n\n  TODO: Describe\n*/\nRafael.prototype.pause = function pause (id) {\n  if (this._debug) {\n    console.log('Pausing', id || 'all tasks')\n  }\n\n  if (id) {\n    this.tasks[id].paused = true\n  } else {\n    this.paused = true\n  }\n}\n\n\n\n\n\n/*\n  ## `Rafael.start(id)`\n\n  TODO: Describe\n*/\nRafael.prototype.start = function start (id) {\n  if (this._debug) {\n    console.log('Starting', id || 'all tasks')\n  }\n\n  if (id) {\n    this.tasks[id].paused = false\n  } else {\n    this.paused = false\n  }\n}\n\n\n\n\n\n/*\n  ## `Rafael._taskCaller(taskObject)`\n\n  Start the loop `requestAnimationFrame` loop for this `Rafael`.\n*/\nRafael.prototype._taskCaller = function _taskCaller (taskObject) {\n  taskObject.task.call(taskObject.context)\n}\n\n\n\n\n\n/*\n  ## `Rafael._startLoop()`\n\n  Start the loop `requestAnimationFrame` loop for this `Rafael`.\n*/\nRafael.prototype._startLoop = function _startLoop () {\n  var i, schedule, tasks\n\n  schedule = this\n  tasks = Object.keys(this.tasks)\n\n  requestAnimationFrame(schedule._startLoop)\n\n  if (!this.paused) {\n    for (i = 0; i < tasks.length; i++) {\n      var task\n\n      task = this.tasks[tasks[i]]\n\n      if ((task['framerate'] === 60 || this._shouldRun(task['framerate'])) && !task.paused) {\n        this._taskCaller(task)\n      }\n    }\n\n    this._frame++\n  }\n}\n\n\n\n\n\n/*\n  ## `Rafael._shouldRun()`\n\n  Compares the passed in framerate against the current frame to determine if the\n  task should run on this frame\n*/\nRafael.prototype._shouldRun = function _shouldRun (framerate) {\n  return !(Math.floor(this._frame % (60 / framerate)))\n}\n\n\n\n\n\nmodule.exports = Rafael\n"]}